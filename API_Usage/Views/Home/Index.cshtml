@{
    ViewData["Title"] = "Index";
}

<h2>IEX Trading Application</h2>
<hr />

<div>
    <p>
        This application let's you fetch trading data from IEX via their public
        <a href="https://iextrading.com/developer/">API</a>.
        <br />
        <br />
        The <a asp-area="" asp-controller="Home" asp-action="Symbols">Symbols</a> tab fetches symbols data from the
        <a href="https://iextrading.com/developer/docs/#reference-data">IEX Reference API </a> and displays the results.
        This data can also be saved in the local database.
        <br />
        The <a asp-area="" asp-controller="Home" asp-action="Chart">Chart</a> tab let's you select a Company(symbol) and fetches a quote from
        <a href="https://iextrading.com/developer/docs/#stocks">IEX Stock API</a>.
        The quote can also be saved in the local database.
        <br />
        The <a asp-area="" asp-controller="Home" asp-action="Refresh">Refresh</a> tab let's you refresh the local database, that is, remove all its contents.
    </p>
    <p>
        The application demonstrates the following -
        <ul>
            <li>Connection to REST API (the example uses IEXTrading, an easy-to-use API that provides stock data)</li>
            <li>Parsing the Json objects returned from the API</li>
            <li>Modeling API results as entities</li>
            <li>Persisting data to a relational database</li>
        </ul>
    </p>
</div>

<div>
    <p>
        <h1> ABOUT US </h1>
        <h2>        Project Description </h2>
        Stock Pricing Strategy:
        <br><br>
        We used "52-Week Price Range Strategy" from "Quantative Strategies for Selecting Stocks". The formula we used for this was current price minus 52-week low divided by the 52-week high minus 52-week low.
        In the website, we will suggest Top 10 Technology Stocks to Buy/Sell this week. The stocks have been extracted from IEXTrading API using below URL.

        We have created a models "EF_models" and "View_Models" to store the JSON values and respected tables will also be created in the database will be used to store suggested stocks.

        <br><br>
        Four API end points are:
        <br><br>
        News:<br>
        We are extracting most active market to get market-wise news. From this API end-point we are extracting headline, source (source of the news article) and most importantly summary which help users to get proper idea about market leaders.
        We are extracting these details from IEXTrading API using News endpoint using below mentioned URL:
        "https://api.iextrading.com/1.0" + "/stock/market/last/5".

        <br><br>
        Sector Wise Performance:<br>
        We are getting an array of each sector and performance for the current trading. Performance is based on each sector. We are extracting these details from IEXTrading API using Sector Performance endpoint using below mentioned URL:
        "https://api.iextrading.com/1.0" + "/stock/market/sector-performance".
        <br><br>
        List:<br>
        This will return most active market top gainers On the basis Opening and closing price of stocks. This is not intended to represent a definitive or accurate list of top 10 gainers, and is subject to change at any time.
        We are extracting these details from IEXTrading API using Sector Performance endpoint using below mentioned URL:
        "https://api.iextrading.com/1.0" + "/stock/market/list/gainers".
        <br><br>
        Financials:<br>
        We are extracting income statements, balance sheet, and cash flow of the top 10 market leaders from the top four most recent reported.
        We are extracting these details from IEXTrading API using News endpoint using below mentioned URL:
        "https://api.iextrading.com/1.0" + "/stock/aapl/financials".
        <br><br>
        Team Members (Team 1): <br><br>
        1) Pratik Utpat <br>
        2) Rohit Kumar <br>
        3) Naman Rastogy <br>
        <br><br>
        Reflection -
        <br><br>
        MVC Core and how data flows across Model, View and Controller architecture
            <br>1) JavaScript and chart.js
            <br>2) Database connectivity
            <br>3) Entity Framework – Code First Approach
            <br>4) ASP Core functionalities
            <br>5) Stock Trading and picking Strategies
            <br>6) IEXTrading API and its features
            <br>7) Hosting website on Azure cloud
        <br><br>
        GitHub Link: <a href="https://github.com/PratikUtpat/API_Usage">GitHub</a>.

    </p>
</div>